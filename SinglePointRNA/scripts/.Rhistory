top <- top[ order( labels(top$cluster) ), ]
View(top)
markers %>%
group_by(cluster) %>%
top_n(n = n, wt = avg_log2FC) -> top
labels(top$cluster)
top$cluster <- as.numeric( as.character( top$cluster ) )
all( is.integer( plotParams$groups ) )
!any( is.na( as.integer( plotParams$groups ) ) )
if( opt$groups=='all' ){
cat( messageList[[ "RunningMsg2.1" ]] )
if( opt$fullResults ){
markers <- Find_DEGs( inputData )
} else {
Idents( inputData ) <- factor( Idents(inputData), levels=plotParams$groups )
markers <- FindAllMarkers(
inputData, min.pct = 0.25, logfc.threshold = 0.5)
}
} else if( opt$groups != "all" ) {
messageList <- generateMsg( opt, g = plotParams$groups )
cat( messageList[[ "RunningMsg2.2" ]] )
markers <- FindMarkers(
inputData, min.pct = 0.25,
ident.1 = plotParams$groups[1],
ident.2 = plotParams$groups[2] )
}
if( plotParams$plot == TRUE ){
messageList <- generateMsg( opt, plotParams=plotParams )
cat( messageList[[ "RunningMsg3" ]] )
DEGplots <- list( )
if( plotParams$plotList$heatmap ){
DEGplots <- c( DEGplots, list( top_heatmap = plotTop_hm(
inputData, markers, plotParams$groups, plotParams$nGenes[1] ) ) )
}
if( plotParams$plotList$violin ){
DEGplots <- c( DEGplots, list( top_violin = plotTop_vi(
inputData, markers, plotParams$groups, plotParams$nGenes[2]  ) ) )
}
if( plotParams$plotList$p2D ){
DEGplots <- c( DEGplots, list( top_2D = plotTop_2D(
inputData, markers, plotParams$groups,
n = plotParams$nGenes[2], embedd = plotParams$reduction ) ) )
}
}
cat(messageList[["RunningMsg4"]])
# 1: DEG tables
saveTables( markers, opt, OutFiles[["tableFolder"]] )
# 2: plots
if( opt$savePlots ){
savePlots( DEGplots, OutFiles[["plotFolder"]] )
}
# Basic input data:
introDF <- data.frame(
value = c(opt$projectName, ncol(inputData), nrow(inputData),
opt$cellGroups, length(levels(Idents(inputData))) ),
row.names=c( "Project Name", "Total number of cells",
"Genes in dataset", "Grouping variable",
"Number of groups")
)
if( opt$groups=="all" ){
introDF <- rbind( introDF,
data.frame(value=c( "Each group VS rest of cells" ),
row.names = "Contrast" )
)
degDF <- do.call( rbind, lapply(
markers,
function(i){
i <- i[ i$p_val_adj < 0.01 & abs(i$avg_log2FC) > 0.5, ]
return( data.frame(
"Up regulated" = sum(i$avg_log2FC > 0),
"Down regulated" = sum(i$avg_log2FC < 0)
))
}
))
rownames( degDF ) <- paste( "Group", names(markers))
} else {
introDF <- rbind( introDF,
data.frame(value=c(paste0( "Group ", plotParams$groups[1],
" VS Group ",  plotParams$groups[2] )),
row.names = "Contrast" )
)
m <- markers[ markers$p_val_adj < 0.01 & abs(markers$avg_log2FC) > 0.5, ]
degDF <- data.frame(
"Up regulated" = sum( m$avg_log2FC > 0),
"Down regulated" = sum( m$avg_log2FC < 0)
)
rownames( degDF ) <- paste0( plotParams$groups, collapse = " Vs. " )
}
# temp file to generate html report:
save( introDF, degDF, DEGplots, markers, opt, OutFiles, file="tmpData/tmp.RData" )
render(input = 'RMD_models/report_DiffExpression.Rmd',
output_file = OutFiles[["Report"]], quiet = TRUE  )
invisible( file.remove( "tmpData/tmp.RData" ) )
cat(messageList[["RunningMsg5"]])
# temp file to generate html report:
save( introDF, degDF, DEGplots, markers, opt, OutFiles, file="tmpData/tmp.RData" )
if( !is.data.frame(markers) ){
introDF <- rbind( introDF,
data.frame(value=c( "Each group VS rest of cells" ),
row.names = "Contrast" )
)
degDF <- do.call( rbind, lapply(
markers,
function(i){
i <- i[ i$p_val_adj < 0.01 & abs(i$avg_log2FC) > 0.5, ]
return( data.frame(
"Up regulated" = sum(i$avg_log2FC > 0),
"Down regulated" = sum(i$avg_log2FC < 0)
))
}
))
rownames( degDF ) <- paste( "Group", names(markers))
} else {
introDF <- rbind( introDF,
data.frame(value=c(paste0( "Group ", plotParams$groups[1],
" VS Group ",  plotParams$groups[2] )),
row.names = "Contrast" )
)
m <- markers[ markers$p_val_adj < 0.01 & abs(markers$avg_log2FC) > 0.5, ]
degDF <- data.frame(
"Up regulated" = sum( m$avg_log2FC > 0),
"Down regulated" = sum( m$avg_log2FC < 0)
)
rownames( degDF ) <- paste0( plotParams$groups, collapse = " Vs. " )
}
View(degDF)
View(markers)
}
getBasicInfo <- function( inputData, opt, markers ){
introDF <- data.frame(
value = c(opt$projectName, ncol(inputData), nrow(inputData),
opt$cellGroups, length(levels(Idents(inputData))) ),
row.names=c( "Project Name", "Total number of cells",
"Genes in dataset", "Grouping variable",
"Number of groups")
)
if( !is.data.frame(markers) ){
introDF <- rbind( introDF,
data.frame(value=c( "Each group VS rest of cells" ),
row.names = "Contrast" )
)
degDF <- do.call( rbind, lapply(
markers,
function(i){
i <- i[ i$p_val_adj < 0.01 & abs(i$avg_log2FC) > 0.5, ]
return( data.frame(
"Up regulated" = sum(i$avg_log2FC > 0),
"Down regulated" = sum(i$avg_log2FC < 0)
))
}
))
rownames( degDF ) <- paste( "Group", names(markers))
} else {
if( length( plotParams$groups ==2 ) ){
introDF <- rbind( introDF,
data.frame(value=c(paste0( "Group ", plotParams$groups[1],
" VS Group ",  plotParams$groups[2] )),
row.names = "Contrast" )
)
m <- markers[ markers$p_val_adj < 0.01 & abs(markers$avg_log2FC) > 0.5, ]
degDF <- data.frame(
"Up regulated" = sum( m$avg_log2FC > 0),
"Down regulated" = sum( m$avg_log2FC < 0)
)
rownames( degDF ) <- paste0( plotParams$groups, collapse = " Vs. " )
} else {
introDF <- rbind( introDF,
data.frame(value=c( "Each group VS rest of cells" ),
row.names = "Contrast" )
)
degDF <- do.call( rbind, lapply(
unique(markers$cluster),
function(i){
m <- markers[ markers$cluster == i, ]
m <- m[ m$p_val_adj < 0.01 & abs(m$avg_log2FC) > 0.5, ]
return( data.frame(
"Up regulated" = sum(m$avg_log2FC > 0),
"Down regulated" = sum(m$avg_log2FC < 0)
))
}
))
}
}
return(list( introDF = introDF, degDF = degDF ))
}
basic_info <- getBasicInfo( inputData, opt, markers )
View(basic_info)
View(basic_info[["introDF"]])
length( plotParams$groups ==2 )
length( plotParams$groups) ==2
getBasicInfo <- function( inputData, opt, markers ){
introDF <- data.frame(
value = c(opt$projectName, ncol(inputData), nrow(inputData),
opt$cellGroups, length(levels(Idents(inputData))) ),
row.names=c( "Project Name", "Total number of cells",
"Genes in dataset", "Grouping variable",
"Number of groups")
)
if( !is.data.frame(markers) ){
introDF <- rbind( introDF,
data.frame(value=c( "Each group VS rest of cells" ),
row.names = "Contrast" )
)
degDF <- do.call( rbind, lapply(
markers,
function(i){
i <- i[ i$p_val_adj < 0.01 & abs(i$avg_log2FC) > 0.5, ]
return( data.frame(
"Up regulated" = sum(i$avg_log2FC > 0),
"Down regulated" = sum(i$avg_log2FC < 0)
))
}
))
rownames( degDF ) <- paste( "Group", names(markers))
} else {
if( length( plotParams$groups) ==2 ){
introDF <- rbind( introDF,
data.frame(value=c(paste0( "Group ", plotParams$groups[1],
" VS Group ",  plotParams$groups[2] )),
row.names = "Contrast" )
)
m <- markers[ markers$p_val_adj < 0.01 & abs(markers$avg_log2FC) > 0.5, ]
degDF <- data.frame(
"Up regulated" = sum( m$avg_log2FC > 0),
"Down regulated" = sum( m$avg_log2FC < 0)
)
rownames( degDF ) <- paste0( plotParams$groups, collapse = " Vs. " )
} else {
introDF <- rbind( introDF,
data.frame(value=c( "Each group VS rest of cells" ),
row.names = "Contrast" )
)
degDF <- do.call( rbind, lapply(
unique(markers$cluster),
function(i){
m <- markers[ markers$cluster == i, ]
m <- m[ m$p_val_adj < 0.01 & abs(m$avg_log2FC) > 0.5, ]
return( data.frame(
"Up regulated" = sum(m$avg_log2FC > 0),
"Down regulated" = sum(m$avg_log2FC < 0)
))
}
))
}
}
return(list( introDF = introDF, degDF = degDF ))
}
basic_info <- getBasicInfo( inputData, opt, markers )
View(basic_info)
View(basic_info[["introDF"]])
View(basic_info[["degDF"]])
rm(basic_info)
basic_info <- getBasicInfo( inputData, opt, markers )
introDF <- basic_info[[ "introDF" ]]
degDF <- basic_info[[ "degDF" ]]
rm(basic_info)
# temp file to generate html report:
save( introDF, degDF, DEGplots, markers, opt, OutFiles, file="tmpData/tmp.RData" )
render(input = 'RMD_models/report_DiffExpression.Rmd',
output_file = OutFiles[["Report"]], quiet = TRUE  )
# temp file to generate html report:
save( introDF, degDF, DEGplots, markers, opt, OutFiles, plotParams, file="tmpData/tmp.RData" )
View(markers)
gc()
markers %>%
group_by(cluster) %>%
top_n(n = n, wt = avg_log2FC) -> top
View(top)
top <- top$gene
plotTop_hm <- function( inputData, markers, g, n=5 ){
# Plots heatmap of top DEGs for every cell group
if( length( g )>2 ){
Idents( inputData ) <- factor( Idents(inputData), levels=g )
top <- getTopGenes( markers, n )
counts <- inputData@assays$integrated@scale.data[
top, names(Idents( inputData)[ Idents(inputData) %in% g ] ) ]
h.counts <- hclust( dist( counts ) )
top <- h.counts$labels[ h.counts$order ]
} else {
inputData <- subset( inputData, idents=g )
Idents( inputData ) <- factor( Idents(inputData), levels=g )
top <- getTopGenes( markers, n )
}
if( is.data.frame( markers ) ){
# Sort genes for the plot
}
DoHeatmap( inputData, features = top, size = 4 ) + NoLegend()
}
plotTop_hm(
inputData, markers, plotParams$groups, plotParams$nGenes[1] )
View(markers)
length( g )>2
plotTop_hm <- function( inputData, markers, g, n=5 ){
# Plots heatmap of top DEGs for every cell group
if( length( g )>2 ){
Idents( inputData ) <- factor( Idents(inputData), levels=g )
top <- getTopGenes( markers, n )
} else {
inputData <- subset( inputData, idents=g )
Idents( inputData ) <- factor( Idents(inputData), levels=g )
top <- getTopGenes( markers, n )
# Sort genes for the plot
counts <- inputData@assays$integrated@scale.data[
top, names(Idents( inputData)[ Idents(inputData) %in% g ] ) ]
h.counts <- hclust( dist( counts ) )
top <- h.counts$labels[ h.counts$order ]
}
DoHeatmap( inputData, features = top, size = 4 ) + NoLegend()
}
plotTop_hm(
inputData, markers, plotParams$groups, plotParams$nGenes[1] )
plotTop_vi(
inputData, markers, plotParams$groups, plotParams$nGenes[2]  )
getTopGenes <- function( markers, n ){
# Select the genes to plot from a differential expression data.frame.
# Input:
#  - markers: differential expression data frame or list of data frames
#  - n: number of genes to extract.
if( ! is.data.frame( markers ) ){
markers <- markers[ match( groups, names(markers) ) ]
top <- lapply(
markers,
function(i){ rownames( i )[ 1:n ] } )
} else {
if("cluster" %in% colnames( markers ) ){
markers %>%
group_by(cluster) %>%
top_n(n = n, wt = avg_log2FC) -> top
top <- lapply(
top$cluster,
function(i){ top$gene[ top$cluster == i ] })
} else {
markers <- markers[ order( markers$p_val_adj ), ]
top <- rownames( markers )[ 1:(4*n) ]
}
}
return(top)
}
plotTop_hm <- function( inputData, markers, g, n=5 ){
# Plots heatmap of top DEGs for every cell group
if( length( g )>2 ){
Idents( inputData ) <- factor( Idents(inputData), levels=g )
top <- unlist( getTopGenes( markers, n ) )
} else {
inputData <- subset( inputData, idents=g )
Idents( inputData ) <- factor( Idents(inputData), levels=g )
top <- getTopGenes( markers, n )
# Sort genes for the plot
counts <- inputData@assays$integrated@scale.data[
top, names(Idents( inputData)[ Idents(inputData) %in% g ] ) ]
h.counts <- hclust( dist( counts ) )
top <- h.counts$labels[ h.counts$order ]
}
DoHeatmap( inputData, features = top, size = 4 ) + NoLegend()
}
getTopGenes <- function( markers, n ){
# Select the genes to plot from a differential expression data.frame.
# Input:
#  - markers: differential expression data frame or list of data frames
#  - n: number of genes to extract.
if( ! is.data.frame( markers ) ){
markers <- markers[ match( groups, names(markers) ) ]
top <- lapply(
markers,
function(i){ rownames( i )[ 1:n ] } )
} else {
if("cluster" %in% colnames( markers ) ){
markers %>%
group_by(cluster) %>%
top_n(n = n, wt = avg_log2FC) -> top
top <- lapply(
top$cluster,
function(i){ top$gene[ top$cluster == i ] })
} else {
markers <- markers[ order( markers$p_val_adj ), ]
top <- rownames( markers )[ 1:(4*n) ]
}
}
return(top)
}
plotTop_hm(
inputData, markers, plotParams$groups, plotParams$nGenes[1] )
plotTop_vi(
inputData, markers, plotParams$groups, plotParams$nGenes[2]  )
length( g )>2
top <- getTopGenes( markers, n )
getTopGenes <- function( markers, n ){
# Select the genes to plot from a differential expression data.frame.
# Input:
#  - markers: differential expression data frame or list of data frames
#  - n: number of genes to extract.
if( ! is.data.frame( markers ) ){
markers <- markers[ match( groups, names(markers) ) ]
top <- lapply(
markers,
function(i){ rownames( i )[ 1:n ] } )
} else {
if("cluster" %in% colnames( markers ) ){
markers %>%
group_by(cluster) %>%
top_n(n = n, wt = avg_log2FC) -> top
top <- lapply(
unique(top$cluster),
function(i){ top$gene[ top$cluster == i ] })
} else {
markers <- markers[ order( markers$p_val_adj ), ]
top <- rownames( markers )[ 1:(4*n) ]
}
}
return(top)
}
if( plotParams$plot == TRUE ){
messageList <- generateMsg( opt, plotParams=plotParams )
cat( messageList[[ "RunningMsg3" ]] )
DEGplots <- list( )
if( plotParams$plotList$heatmap ){
DEGplots <- c( DEGplots, list( top_heatmap = plotTop_hm(
inputData, markers, plotParams$groups, plotParams$nGenes[1] ) ) )
}
if( plotParams$plotList$violin ){
DEGplots <- c( DEGplots, list( top_violin = plotTop_vi(
inputData, markers, plotParams$groups, plotParams$nGenes[2] ) ) )
}
if( plotParams$plotList$p2D ){
DEGplots <- c( DEGplots, list( top_2D = plotTop_2D(
inputData, markers, plotParams$groups,
n = plotParams$nGenes[2], embedd = plotParams$reduction ) ) )
}
}
View(DEGplots)
# 2: plots
if( opt$savePlots ){
savePlots( DEGplots, OutFiles[["plotFolder"]] )
}
View(markers)
View(DEGplots)
DEGplots$top_violin[[12]]
DEGplots$top_violin[[11]]
View(markers)
top <- getTopGenes( markers, n )
View(top)
getTopGenes <- function( markers, n ){
# Select the genes to plot from a differential expression data.frame.
# Input:
#  - markers: differential expression data frame or list of data frames
#  - n: number of genes to extract.
if( ! is.data.frame( markers ) ){
markers <- markers[ match( groups, names(markers) ) ]
top <- lapply(
markers,
function(i){ rownames( i )[ 1:n ] } )
} else {
if("cluster" %in% colnames( markers ) ){
markers %>%
group_by(cluster) %>%
top_n(n = n, wt = avg_log2FC) -> top
top <- lapply(
sort(unique(top$cluster)),
function(i){ top$gene[ top$cluster == i ] })
} else {
markers <- markers[ order( markers$p_val_adj ), ]
top <- rownames( markers )[ 1:(4*n) ]
}
}
return(top)
}
top <- getTopGenes( markers, n )
View(top)
getTopGenes <- function( markers, n ){
# Select the genes to plot from a differential expression data.frame.
# Input:
#  - markers: differential expression data frame or list of data frames
#  - n: number of genes to extract.
if( ! is.data.frame( markers ) ){
markers <- markers[ match( groups, names(markers) ) ]
top <- lapply(
markers,
function(i){ rownames( i )[ 1:n ] } )
} else {
if("cluster" %in% colnames( markers ) ){
markers %>%
group_by(cluster) %>%
top_n(n = n, wt = avg_log2FC) -> top
top <- lapply(
sort(unique(top$cluster)),
function(i){ top$gene[ top$cluster == i ] })
} else {
markers <- markers[ order( markers$p_val_adj ), ]
top <- rownames( markers )[ 1:(4*n) ]
}
}
return(top)
}
DEGplots$top_violin <- list( top_violin = plotTop_vi(
inputData, markers, plotParams$groups, plotParams$nGenes[2] ) )
DEGplots[["top_violin"]][[17]]
View(DEGplots)
DEGplots[["top_violin"]]<- DEGplots[["top_violin"]][[1]]
View(DEGplots)
DEGplots[["top_violin"]][[17]]
# 2: plots
if( opt$savePlots ){
savePlots( DEGplots, OutFiles[["plotFolder"]] )
}
DEGplots$top_2D <-  plotTop_2D(
inputData, markers, plotParams$groups,
n = plotParams$nGenes[2], embedd = plotParams$reduction )
View(DEGplots)
# 2: plots
if( opt$savePlots ){
savePlots( DEGplots, OutFiles[["plotFolder"]] )
}
